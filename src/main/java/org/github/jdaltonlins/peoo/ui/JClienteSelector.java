/*
* MIT License
* 
* Copyright (c) 2021 Dalton Lins
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
 */
package org.github.jdaltonlins.peoo.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import javax.swing.AbstractListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import org.github.jdaltonlins.peoo.obj.Cliente;
import org.github.jdaltonlins.peoo.utils.Manager;

/**
 *
 * @author Dalton
 */
public class JClienteSelector extends javax.swing.JPanel {

    private JDialog dialog;
    private Consumer<Cliente> consumer;

    /**
     * Creates new form JClienteSelector
     *
     * @param dialog
     */
    public JClienteSelector(JDialog dialog, Consumer<Cliente> consumer) {
        this.dialog = dialog;
        this.consumer = consumer;
        this.initComponents();
        this.dialog.setContentPane(this);
        this.dialog.setResizable(false);
        this.dialog.setLocationRelativeTo(null);
        this.dialog.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listPanel = new javax.swing.JScrollPane();
        listClients = new javax.swing.JList<>();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        listClients.setModel(new ClienteListModel());
        listClients.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listClients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClick(evt);
            }
        });
        listPanel.setViewportView(listClients);

        okBtn.setText("Ok");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onConfirm(evt);
            }
        });

        cancelBtn.setText("Cancelar");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okBtn)
                    .addComponent(cancelBtn))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onConfirm(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConfirm
        if (this.listClients.getSelectedIndex() < 0) {
            if (JOptionPane.showConfirmDialog(this.dialog, "Você tem que selecionar uma opção", "Ops! Você esqueceu de algo.", JOptionPane.OK_CANCEL_OPTION) != JOptionPane.OK_OPTION) {
                this.dialog.dispose();
                return;
            }
        }
        int i = this.listClients.getSelectedIndex();
        Cliente cliente = ((ClienteListModel) this.listClients.getModel()).getCliente(i);
        this.consumer.accept(cliente);
        this.dialog.dispose();
    }//GEN-LAST:event_onConfirm

    private void onCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCancel
        this.dialog.dispose();
    }//GEN-LAST:event_onCancel

    private void onClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClick
        if (evt.getClickCount() >= 2) {
            if (this.listClients.getSelectedIndex() < 0) {
                return;
            }
            int i = this.listClients.getSelectedIndex();
            Cliente cliente = ((ClienteListModel) this.listClients.getModel()).getCliente(i);
            this.consumer.accept(cliente);
            this.dialog.dispose();
        }
    }//GEN-LAST:event_onClick


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JList<String> listClients;
    private javax.swing.JScrollPane listPanel;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables

    public class ClienteListModel extends AbstractListModel<String> {

        private Cliente[] clientes = new ArrayList<>(Manager.getClientes().values()).toArray(new Cliente[0]);

        public int getSize() {
            return clientes.length;
        }

        public String getElementAt(int i) {
            return clientes[i].nome;
        }

        public Cliente getCliente(int i) {
            return clientes[i];
        }
    }

}
