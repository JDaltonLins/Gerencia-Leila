/*
* MIT License
* 
* Copyright (c) 2021 Dalton Lins
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
 */
package org.github.jdaltonlins.peoo.ui;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.function.Consumer;
import javax.swing.BorderFactory;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.UIManager;
import org.github.jdaltonlins.peoo.obj.Cliente;
import org.github.jdaltonlins.peoo.obj.Servico;
import org.github.jdaltonlins.peoo.utils.Manager;
import org.github.jdaltonlins.peoo.utils.Utils;
import org.jdesktop.swingx.JXDatePicker;

/**
 *
 * @author Dalton
 */
public class JNovoServico extends Backable implements Consumer<String> {

    private int clienteId;

    /**
     * Creates new form JNovoServico
     */
    public JNovoServico() {
        this(null);
    }

    /**
     * Creates new form JNovoServico
     *
     * @param frame
     */
    public JNovoServico(JFrame frame) {
        super(frame);
        initComponents();
        this.active();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        contentClient = new javax.swing.JPanel();
        titleName = new javax.swing.JLabel();
        inputName = new javax.swing.JTextField();
        titleNumero = new javax.swing.JLabel();
        inputNumero = new javax.swing.JFormattedTextField();
        titleCpf = new javax.swing.JLabel();
        inputCPF = new javax.swing.JFormattedTextField();
        searchBtn = new javax.swing.JButton();
        cleanBtn = new javax.swing.JButton();
        divisor = new javax.swing.JSeparator();
        contentService = new javax.swing.JPanel();
        titleServices = new javax.swing.JLabel();
        panelServicos = new javax.swing.JScrollPane();
        listServicos = new javax.swing.JList<>();
        divisor2 = new javax.swing.JSeparator();
        titleAgenda = new javax.swing.JLabel();
        inputHorario = new javax.swing.JFormattedTextField();
        inputDate = new JXDatePicker(new Date());
        addBtn = new javax.swing.JButton();
        finishBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro ");
        setResizable(false);

        content.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()));

        titleName.setLabelFor(inputName);
        titleName.setText("<html>Nome: <a color=\"#f34336\">*</a></html>");

        inputName.setToolTipText("Nome do Cliente");
        inputName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                onType(evt);
            }
        });

        titleNumero.setLabelFor(titleNumero);
        titleNumero.setText("<html>Numero:</html>");
        titleNumero.setMaximumSize(new java.awt.Dimension(33, 14));
        titleNumero.setMinimumSize(new java.awt.Dimension(33, 14));

        try {
            inputNumero.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        inputNumero.setText("(__) _____-____    ");
        inputNumero.setToolTipText("Numero do Cliente");
        inputNumero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                onType(evt);
            }
        });

        titleCpf.setLabelFor(inputCPF);
        titleCpf.setText("CPF:");
        titleCpf.setMaximumSize(new java.awt.Dimension(33, 14));
        titleCpf.setMinimumSize(new java.awt.Dimension(33, 14));

        try {
            inputCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        inputCPF.setText("___.___.___-__");
        inputCPF.setToolTipText("CPF do Cliente");
        inputCPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                onType(evt);
            }
        });

        searchBtn.setText("Procurar Cliente");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSearch(evt);
            }
        });

        cleanBtn.setText("Limpar");
        cleanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onClear(evt);
            }
        });

        javax.swing.GroupLayout contentClientLayout = new javax.swing.GroupLayout(contentClient);
        contentClient.setLayout(contentClientLayout);
        contentClientLayout.setHorizontalGroup(
            contentClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentClientLayout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addComponent(cleanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(contentClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contentClientLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(inputName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addComponent(titleNumero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inputNumero, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(titleName, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(titleCpf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(contentClientLayout.createSequentialGroup()
                            .addComponent(searchBtn)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(inputCPF))
                    .addContainerGap()))
        );
        contentClientLayout.setVerticalGroup(
            contentClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentClientLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cleanBtn)
                .addContainerGap())
            .addGroup(contentClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contentClientLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(titleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(titleNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(inputNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(titleCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(inputCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                    .addComponent(searchBtn)
                    .addContainerGap()))
        );

        divisor.setOrientation(javax.swing.SwingConstants.VERTICAL);

        titleServices.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleServices.setText("Serviços");

        panelServicos.setViewportView(listServicos);

        titleAgenda.setLabelFor(inputHorario);
        titleAgenda.setText("Agendar para");

        inputHorario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance())));
        inputHorario.setText("12:00:00");

        addBtn.setText("Adicionar Serviço");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addServico(evt);
            }
        });

        finishBtn.setText("Finalizar Cadastro");
        finishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizar(evt);
            }
        });

        javax.swing.GroupLayout contentServiceLayout = new javax.swing.GroupLayout(contentService);
        contentService.setLayout(contentServiceLayout);
        contentServiceLayout.setHorizontalGroup(
            contentServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentServiceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelServicos, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                    .addComponent(titleServices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentServiceLayout.createSequentialGroup()
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finishBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentServiceLayout.createSequentialGroup()
                        .addComponent(inputHorario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contentServiceLayout.createSequentialGroup()
                        .addComponent(titleAgenda)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(divisor2))
                .addContainerGap())
        );
        contentServiceLayout.setVerticalGroup(
            contentServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentServiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleServices, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelServicos, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(divisor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleAgenda)
                .addGap(0, 0, 0)
                .addGroup(contentServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputHorario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finishBtn)
                    .addComponent(addBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addComponent(contentClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(divisor, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentService, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(divisor))
            .addComponent(contentService, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contentClient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void finalizar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizar
        // TODO add your handling code here:
        if (this.listServicos.getModel().getSize() == 0) {
            if (JOptionPane.showConfirmDialog(this, "Você precisa adicionar pelo menos um serviço", "Ops! Você esqueceu de algo", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE) != JOptionPane.OK_OPTION) {
                this.dispose();
            }
            return;
        }
        Cliente cliente;
        if (this.clienteId == 0) {
            List<String> erros = new ArrayList<>();
            String numero = this.inputNumero.getText();
            if (numero.replaceAll("[\\(\\)-]", "").trim().length() > 0 && !this.inputNumero.isEditValid()) {
                inputNumero.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
                erros.add("Número");
                numero = "";
            }
            String cpf = this.inputCPF.getText();
            if (cpf.replaceAll("[\\.-]", "").trim().length() > 0 && !this.inputNumero.isEditValid()) {
                inputCPF.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
                erros.add("CPF");
                cpf = "";
            }

            if (erros.size() > 0) {
                String errosStr = Utils.toJoin(erros);
                boolean plural = erros.size() > 1;
                if (JOptionPane.showConfirmDialog(this, "Você precisa preencher corretamente "
                        + (plural ? "os " : "o ")
                        + "campo" + (plural ? "s" : "")
                        + ": "
                        + errosStr, "Ops! Você esqueceu de algo.", JOptionPane.ERROR_MESSAGE) != JOptionPane.OK_OPTION) {
                    this.dispose();
                }
                return;
            }

            cliente = new Cliente(0, this.inputName.getText(), numero, cpf);
        } else {
            cliente = Manager.getClientes().get(this.clienteId);
        }

        if (!this.inputHorario.isEditValid()) {
            if (JOptionPane.showConfirmDialog(this, "Você precisa adicionar uma hora válida!", "Ops! Você esqueceu de algo", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE) != JOptionPane.OK_OPTION) {
                this.dispose();
            }
            return;
        }
        Date horario;
        try {
            horario = Utils.DATE_FORMAT.parse(this.inputHorario.getText());
        } catch (Throwable e) {
            if (JOptionPane.showConfirmDialog(this, "Você precisa adicionar uma hora válida!", "Ops! Você esqueceu de algo", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE) != JOptionPane.OK_OPTION) {
                this.dispose();
            }
            return;
        }

        Date data = this.inputDate.getDate();
        if (data != null) {
            data.setHours(horario.getHours());
            data.setMinutes(horario.getMinutes());
            data.setSeconds(horario.getSeconds());
        }

        if (data == null || System.currentTimeMillis() > data.getTime()) {
            if (JOptionPane.showConfirmDialog(this, "Você precisa adicionar um dia válido e futuro!", "Ops! Você esqueceu de algo", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE) != JOptionPane.OK_OPTION) {
                this.dispose();
            }
            return;
        }
        if (cliente.id == 0) {
            Manager.registerClient(cliente);
        }
        Servico servico = new Servico(cliente.id, getAllServices(), 0);
        Manager.getServicos().add(servico);
        Manager.saveFromCache();

        this.dispose();
    }//GEN-LAST:event_finalizar

    private void addServico(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addServico
        // TODO add your handling code here:
        new JServico(this).setVisible(true);
    }//GEN-LAST:event_addServico

    private void onClear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClear
        this.clienteId = 0;
        this.inputName.setText("");
        this.inputNumero.setText("");
        this.inputCPF.setText("");
        this.inputName.setEnabled(true);
        this.inputNumero.setEnabled(true);
        this.inputCPF.setEnabled(true);
    }//GEN-LAST:event_onClear

    private void onType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onType
        // TODO add your handling code here:
        JTextField field = (JTextField) evt.getSource();
        field.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
    }//GEN-LAST:event_onType

    private void onSearch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSearch
        // TODO add your handling code here:
        JDialog dialog = new JDialog(this, "Selecione o cliente", true);
        new JClienteSelector(dialog, e -> {
            this.clienteId = e.id;
            this.inputName.setText(e.nome);
            this.inputNumero.setText(e.numero);
            this.inputCPF.setText(e.cpf);
            this.inputName.setEnabled(false);
            this.inputNumero.setEnabled(false);
            this.inputCPF.setEnabled(false);
        });
        dialog.setVisible(true);
    }//GEN-LAST:event_onSearch

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton cleanBtn;
    private javax.swing.JPanel content;
    private javax.swing.JPanel contentClient;
    private javax.swing.JPanel contentService;
    private javax.swing.JSeparator divisor;
    private javax.swing.JSeparator divisor2;
    private javax.swing.JButton finishBtn;
    private javax.swing.JFormattedTextField inputCPF;
    private org.jdesktop.swingx.JXDatePicker inputDate;
    private javax.swing.JFormattedTextField inputHorario;
    private javax.swing.JTextField inputName;
    private javax.swing.JFormattedTextField inputNumero;
    private javax.swing.JList<String> listServicos;
    private javax.swing.JScrollPane panelServicos;
    private javax.swing.JButton searchBtn;
    private javax.swing.JLabel titleAgenda;
    private javax.swing.JLabel titleCpf;
    private javax.swing.JLabel titleName;
    private javax.swing.JLabel titleNumero;
    private javax.swing.JLabel titleServices;
    // End of variables declaration//GEN-END:variables

    public List<String> getAllServices() {
        ListModel<String> list = this.listServicos.getModel();
        List<String> array;
        if (list != null) {
            array = new ArrayList<>(list.getSize());
            for (int i = 0, s = list.getSize(); i < s; i++) {
                array.add(list.getElementAt(i));
            }
        } else {
            array = new ArrayList<>();
        }
        return array;
    }

    @Override
    public void accept(String t) {
        List<String> array = getAllServices();

        array.add(t);
        this.listServicos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = array.toArray(new String[0]);

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }

    public static class HorarioVerify extends InputVerifier {

        private JTextField field;

        public boolean isNumber(String s) {
            try {
                Integer.parseInt(s);
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }

        public int count(String s, char c) {
            char[] chars = s.toCharArray();
            int count = 0;
            for (int i = 0, l = s.length(); i < l; i++) {
                if (chars[i] == c) {
                    count++;
                }
            }
            return count;
        }

        @Override
        public boolean verify(JComponent jc) {
            String text = field.getText().trim().replace(" ", "");
            if (text.contains(":")) {
                String[] split = text.split(":");
                for (String s : split) {
                    if (!isNumber(s)) {
                        JOptionPane.showMessageDialog(this.field, "O '" + s + "' não é um número valído!", "Ops! Acho que você esqueceu de algo", JOptionPane.OK_OPTION);
                        return false;
                    }
                }
                if (split.length == 0 || split.length != count(text, ':')) {
                    JOptionPane.showMessageDialog(this.field, "Formato do horário inválido!", "Ops! Acho que você esqueceu de algo", JOptionPane.OK_OPTION);
                    return false;
                } else if (split.length > 3) {
                    JOptionPane.showMessageDialog(this.field, "Você só pode definir somente até os segundos!", "Ops! Acho que você esqueceu de algo", JOptionPane.OK_OPTION);
                    return false;
                }
                int hora = Integer.parseInt(split[0]);
            } else if (text.length() == 0) {
                return false;
            } else {

            }
            return true;
        }

    }
}
